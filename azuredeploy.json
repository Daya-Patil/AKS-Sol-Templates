{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "EventHubName": {
      "type": "string"
    },
    "NSGName": {
      "type": "string"
    },
    "VirtualNetworkName": {
      "type": "string",
      "defaultValue": "TBSENTVnet"
    },
    "VnetAddressPrefix": {
      "type": "array",
      "defaultValue": [
        "192.168.16.0/23"
      ]
    },
    "subnet1_name": {
      "type": "string",
      "defaultValue": "TBSSubnet"
    },
    "subnet1_addressRange": {
      "type": "string",
      "defaultValue": "192.168.16.0/23"
    },
    "Log_Analytics_workspace_Name": {
      "type": "string"
    },
    "Log_Analytics_workspace_location": {
      "type": "string",
      "defaultValue": "southeastasia",
      "allowedValues": [
        "australiacentral",
        "australiaeast",
        "australiasoutheast",
        "brazilsouth",
        "canadacentral",
        "centralindia",
        "centralus",
        "eastasia",
        "eastus",
        "eastus2",
        "francecentral",
        "japaneast",
        "koreacentral",
        "northcentralus",
        "northeurope",
        "southafricanorth",
        "southcentralus",
        "southeastasia",
        "uksouth",
        "ukwest",
        "westcentralus",
        "westeurope",
        "westus",
        "westus2"
      ]
    },
    "AksClusterName": {
      "type": "string"
    },
    "servicePrincipalClientId": {
      "type": "securestring",
      "metadata": {
        "description": "The Service Principal Client ID."
      }
    },
    "servicePrincipalClientSecret": {
      "type": "securestring",
      "metadata": {
        "description": "The Service Principal Client Secret."
      }
    },
    "serviceCidr": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "A CIDR notation IP range from which to assign service cluster IPs."
      }
    },
    "dnsServiceIP": {
      "type": "string",
      "defaultValue": "10.0.0.10",
      "metadata": {
        "description": "Containers DNS server IP address."
      }
    },
    "dockerBridgeCidr": {
      "type": "string",
      "defaultValue": "172.17.0.1/16",
      "metadata": {
        "description": "A CIDR notation IP for Docker bridge."
      }
    },
    "AksNodeResourceGroupPrefix": {
      "type": "string",
      "defaultValue": "MC_TBS-RG-SI-Entrp_",
      "metadata": {
        "description": "Prefex for nodeResourceGroup of AKS cluster."
      }
    }
  },
  "variables": {},
  "resources": [
    {
      "type": "Microsoft.EventHub/namespaces",
      "apiVersion": "2018-01-01-preview",
      "name": "[parameters('EventHubName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard",
        "tier": "Standard",
        "capacity": 1
      },
      "properties": {
        "zoneRedundant": false,
        "isAutoInflateEnabled": false,
        "maximumThroughputUnits": 0,
        "kafkaEnabled": true
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2019-09-01",
      "name": "[parameters('NSGName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": []
      }
    },
    {
      "type": "Microsoft.EventHub/namespaces/AuthorizationRules",
      "apiVersion": "2017-04-01",
      "name": "[concat(parameters('EventHubName'), '/RootManageSharedAccessKey')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', parameters('EventHubName'))]"
      ],
      "properties": {
        "rights": [
          "Listen",
          "Manage",
          "Send"
        ]
      }
    },
    {
      "type": "Microsoft.EventHub/namespaces/networkRuleSets",
      "apiVersion": "2018-01-01-preview",
      "name": "[concat(parameters('EventHubName'), '/default')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', parameters('EventHubName'))]"
      ],
      "properties": {
        "defaultAction": "Deny",
        "virtualNetworkRules": [],
        "ipRules": []
      }
    },
    {
      "name": "[parameters('VirtualNetworkName')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2019-04-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('NSGName'))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": "[parameters('vnetAddressPrefix')]"
        },
        "virtualNetworkPeerings": [],
        "enableDdosProtection": false,
        "enableVmProtection": false
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2019-09-01",
      "name": "[concat(parameters('VirtualNetworkName'), '/', parameters('subnet1_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('VirtualNetworkName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('NSGName'))]"
      ],
      "properties": {
        "addressPrefix": "[parameters('subnet1_addressRange')]",
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('NSGName'))]"
        },
        "delegations": [],
        "privateEndpointNetworkPolicies": "Enabled",
        "privateLinkServiceNetworkPolicies": "Enabled"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "name": "[parameters('Log_Analytics_workspace_Name')]",
      "apiVersion": "2017-03-15-preview",
      "location": "[parameters('Log_Analytics_workspace_location')]",
      "properties": {
        "sku": {
          "name": "CapacityReservation",
          "capacityReservationLevel": 100
        },
        "retentionInDays": 120,
        "features": {
          "searchVersion": 1,
          "legacy": 0,
          "enableLogAccessUsingOnlyResourcePermissions": true
        }
      }
    },
    {
      "type": "Microsoft.ContainerService/managedClusters",
      "apiVersion": "2019-10-01",
      "name": "[parameters('AKSClusterName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('Log_Analytics_workspace_Name'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('VirtualNetworkName'), parameters('subnet1_name'))]"
      ],
      "properties": {
        "kubernetesVersion": "1.15.7",
        "dnsPrefix": "[concat(parameters('AKSClusterName'), '-dns')]",
        "agentPoolProfiles": [
          {
            "name": "agentpool",
            "count": 2,
            "vmSize": "Standard_F8s",
            "osDiskSizeGB": 100,
            "vnetSubnetID": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('VirtualNetworkName'), parameters('subnet1_name'))]",
            "maxPods": 30,
            "type": "VirtualMachineScaleSets",
            "orchestratorVersion": "1.15.7",
            "osType": "Linux"
          }
        ],
        "servicePrincipalProfile": {
          "clientId": "[parameters('servicePrincipalClientId')]",
          "secret": "[parameters('servicePrincipalClientSecret')]"
        },
        "addonProfiles": {
          "httpApplicationRouting": {
            "enabled": true
          },
          "omsagent": {
            "enabled": true,
            "config": {
              "logAnalyticsWorkspaceResourceID": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('Log_Analytics_workspace_Name'))]"
            }
          }
        },
        "nodeResourceGroup": "[concat(parameters('AKSnodeResourceGroupPrefix'), parameters('AKSClusterName'), '_', resourceGroup().location )]",
        "enableRBAC": true,
        "networkProfile": {
          "networkPlugin": "azure",
          "loadBalancerSku": "standard",
          "loadBalancerProfile": {
            "managedOutboundIPs": {
              "count": 1
            }

          },
          "serviceCidr": "[parameters('serviceCidr')]",
          "dnsServiceIP": "[parameters('dnsServiceIP')]",
          "dockerBridgeCidr": "[parameters('dockerBridgeCidr')]",
          "outboundType": "loadBalancer"
        }
      }
    },
    {
      "type": "Microsoft.ContainerService/managedClusters/agentPools",
      "apiVersion": "2019-10-01",
      "name": "[concat(parameters('AKSClusterName'), '/agentpool')]",
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', parameters('AKSClusterName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('VirtualNetworkName'), parameters('subnet1_name'))]"
      ],
      "properties": {
        "count": 2,
        "vmSize": "Standard_F8s",
        "osDiskSizeGB": 100,
        "vnetSubnetID": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('VirtualNetworkName'), parameters('subnet1_name'))]",
        "maxPods": 30,
        "type": "VirtualMachineScaleSets",
        "orchestratorVersion": "1.15.7",
        "osType": "Linux"
      }
    }
  ]
  
}
